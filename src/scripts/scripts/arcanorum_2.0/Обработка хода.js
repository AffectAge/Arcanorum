/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
 */
function scanNamedRanges() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getActiveSheet(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
  
  // –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å (–∏—Å–∫–ª—é—á–∞–µ–º –ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π)
  const namedRanges = ['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', '–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã', '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'];
  
  // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  let data = {};
  
  try {
    // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    namedRanges.forEach(rangeName => {
      const range = spreadsheet.getRangeByName(rangeName);
      if (range) {
        data[rangeName] = range.getValues();
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
      } else {
        const errorMsg = `–î–∏–∞–ø–∞–∑–æ–Ω —Å –∏–º–µ–Ω–µ–º "${rangeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π
        addMessagesToRange4([`[–û—à–∏–±–∫–∞] ${errorMsg}`], spreadsheet);
        throw new Error(errorMsg);
      }
    });
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ç–æ—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processTurn(data, sheet, spreadsheet);
    
  } catch (error) {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ –ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π
    const errorMessage = `[–û—à–∏–±–∫–∞] scanNamedRanges: ${error.message}`;
    addMessagesToRange4([errorMessage], spreadsheet);
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–∑–æ–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥—Ñ—É–Ω–∫—Ü–∏–π
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * @param {Sheet} sheet - –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
 * @param {Spreadsheet} spreadsheet - –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
 */
/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–∑–æ–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥—Ñ—É–Ω–∫—Ü–∏–π
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * @param {Sheet} sheet - –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
 * @param {Spreadsheet} spreadsheet - –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
 */
function processTurn(data, sheet, spreadsheet) {
  let allNewMessages = [];
  
  try {
    // –ú–∞—Å—Å–∏–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const functionsToRun = [
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ—Å—Ç—Ä–æ–µ–∫', func: () => processBuildingsCriterias(data, sheet, spreadsheet) },
      { name: '–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –∑–¥–∞–Ω–∏–π –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏', func: () => updateProvinceRequiredBuildings(data, spreadsheet) },
      { name: '–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –∑–¥–∞–Ω–∏–π –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ', func: () => updateStateRequiredBuildings(data, spreadsheet) },
      // –í–ê–ñ–ù–û! –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞(–®–∞–±–ª–æ–Ω—ã –∑–¥–∞–Ω–∏–π)
      // –í–ê–ñ–ù–û! –ó–∞—Ç–µ–º –∏–¥—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–¥–∞–Ω–∏–π
      { name: '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π', func: () => copyMatchingProvincesToAllowed(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é', func: () => processProvinceLimits(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', func: () => processStateLimits(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –º–∏—Ä', func: () => processWorldLimits(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏', func: () => processRequiredResources(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–∞–ª–∏—á–∏—è –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∑–µ–º–µ–ª—å', func: () => processArableLandRequirements(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–∞–ª–∏—á–∏—è —Ä–∞–±–æ—á–∏—Ö', func: () => processRequiredWorkers(data, spreadsheet) },
      { name: '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤', func: () => updateResourcesAvailable(data, spreadsheet) }
      // –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å, –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    ];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ü–∏–∫–ª for –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
    for (let i = 0; i < functionsToRun.length; i++) {
      const { name, func } = functionsToRun[i];
      try {
        const start = new Date();
        const result = func();
        const end = new Date();
        const duration = end - start; // –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const durationSec = (duration / 1000).toFixed(3);
        allNewMessages.push(`[–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π] üõ†Ô∏è${name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ‚è≥${durationSec} —Å–µ–∫—É–Ω–¥`);
        
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (Array.isArray(result)) {
          allNewMessages = allNewMessages.concat(result);
        }
      } catch (funcError) {
        const errorMsg = `[–û—à–∏–±–∫–∞] ${name}: ${funcError.message}`;
        allNewMessages.push(errorMsg);
        // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      }
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    allNewMessages = allNewMessages.filter(msg => typeof msg === 'string');
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π
    if (allNewMessages.length > 0) {
      addMessagesToRange4(allNewMessages, spreadsheet);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    updateRanges(data, spreadsheet);
    
  } catch (error) {
    const errorMessage = `[–û—à–∏–±–∫–∞] processTurn: ${error.message}`;
    addMessagesToRange4([errorMessage], spreadsheet);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
 *
 * @param {Object} updatedData - –û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * @param {Spreadsheet} spreadsheet - –û–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
function updateRanges(updatedData, spreadsheet) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  const blacklist = new Set(['–ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π']);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ API
  const namedRanges = spreadsheet.getNamedRanges();
  
  // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –ø–æ –∏–º–µ–Ω–∏
  const namedRangeMap = {};
  namedRanges.forEach(namedRange => {
    namedRangeMap[namedRange.getName()] = namedRange.getRange();
  });
  
  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
  const errorMessages = [];
  
  // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
  for (const [rangeName, values] of Object.entries(updatedData)) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if (blacklist.has(rangeName)) {
      continue;
    }
    
    const range = namedRangeMap[rangeName];
    if (range) {
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        range.setValues(values);
      } catch (error) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        errorMessages.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω "${rangeName}": ${error.message}`);
      }
    } else {
      // –î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      errorMessages.push(`–î–∏–∞–ø–∞–∑–æ–Ω —Å –∏–º–µ–Ω–µ–º "${rangeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.`);
    }
  }
  
  // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
  if (errorMessages.length > 0) {
    const combinedErrorMsg = errorMessages.join('\n');
    logErrorToEventLog(combinedErrorMsg, spreadsheet);
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  SpreadsheetApp.flush();
}