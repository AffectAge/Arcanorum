/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
 *
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
 * @param {Spreadsheet} spreadsheet - –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞.
 * @returns {Array} messages - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π.
 */
function updateResourcesAvailable(data, spreadsheet) {
  let messages = [];

  try {
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const transportTypeDescriptions = {
      land: 'üöö–Ω–∞–∑–µ–º–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      air: 'üöÅ–≤–æ–∑–¥—É—à–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      water: 'üö¢–≤–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      space: 'üöÄ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'
    };

    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    const resourceCategoryDescriptions = {
      goods: 'üì¶—Ç–æ–≤–∞—Ä—ã',
	  gas: 'üí®–≥–∞–∑—ã',
	  liquid: 'üíß–∂–∏–¥–∫–æ—Å—Ç–∏',
	  service: 'üíº—É—Å–ª—É–≥–∏',
	  energy: '‚ö°—ç–Ω–µ—Ä–≥–∏—è'
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä:
      // food: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
      // minerals: '–ú–∏–Ω–µ—Ä–∞–ª—ã',
    };

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ stateName –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ
    const variablesData = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ'];
    if (!variablesData || variablesData.length === 0 || !variablesData[0][0]) {
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.`);
      return messages;
    }

    let stateName;
    try {
      const variables = JSON.parse(variablesData[0][0]);
      if (!variables.state_name) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ "state_name" –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.`);
        return messages;
      }
      stateName = variables.state_name;
    } catch (e) {
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ: ${e.message}`);
      return messages;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ accessible_countries –∏–∑ –ø—è—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ
    if (variablesData.length < 5 || !variablesData[4][0]) { // –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0, –∑–Ω–∞—á–∏—Ç 5-—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å 4
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 5-–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞.`);
      return messages;
    }

    let accessibleCountries;
    try {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ 5-—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON-–º–∞—Å—Å–∏–≤ accessible_countries
      const accessibleCountriesData = JSON.parse(variablesData[4][0]);
      if (!Array.isArray(accessibleCountriesData)) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] 5-—è —Å—Ç—Ä–æ–∫–∞ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ "accessible_countries".`);
        return messages;
      }
      accessibleCountries = accessibleCountriesData.map(country => country.toLowerCase()); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    } catch (e) {
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ 5-–π —Å—Ç—Ä–æ–∫–∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–û—Å–Ω–æ–≤–Ω—ã–µ: ${e.message}`);
      return messages;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    const settingsData = data['–ù–∞—Å—Ç—Ä–æ–π–∫–∏'];
    if (!settingsData || settingsData.length === 0) {
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return messages;
    }

    let coastalLandscapes = [];
    let transportTypes = [];
    let resourceCategories = [];
    let allowedLandscapes = {};
    try {
      // –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –ø–æ –∫–ª—é—á–∞–º (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
      const transportTypesRow = settingsData.find(row => row[0] && row[0].toLowerCase() === '—Ç–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
      if (!transportTypesRow || !transportTypesRow[1]) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "–¢–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
        return messages;
      }
      transportTypes = JSON.parse(transportTypesRow[1]);
      if (!Array.isArray(transportTypes) || transportTypes.length === 0) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] "–¢–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –ø—É—Å—Ç.`);
        return messages;
      }

      const resourceCategoriesRow = settingsData.find(row => row[0] && row[0].toLowerCase() === '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤');
      if (!resourceCategoriesRow || !resourceCategoriesRow[1]) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
        return messages;
      }
      resourceCategories = JSON.parse(resourceCategoriesRow[1]);
      if (!Array.isArray(resourceCategories) || resourceCategories.length === 0) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –ø—É—Å—Ç.`);
        return messages;
      }

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ coastal_landscapes
      const coastalLandscapesRow = settingsData.find(row => row[0] && row[0].toLowerCase() === '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—É—Ç–µ–π');
      if (!coastalLandscapesRow || !coastalLandscapesRow[1]) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—É—Ç–µ–π" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
        return messages;
      }
      const settingsObject = JSON.parse(coastalLandscapesRow[1]);
      if (!settingsObject.coastal_landscapes || !Array.isArray(settingsObject.coastal_landscapes)) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—É—Ç–µ–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–ª—é—á–∞ "coastal_landscapes" –∏–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.`);
        return messages;
      }
      coastalLandscapes = settingsObject.coastal_landscapes.map(landscape => landscape.toLowerCase()); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ allowedLandscapes
      const allowedLandscapesRow = settingsData.find(row => row[0] && row[0].toLowerCase() === '–ª–∞–Ω–¥—à–∞—Ñ—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤');
      if (!allowedLandscapesRow || !allowedLandscapesRow[1]) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "–õ–∞–Ω–¥—à–∞—Ñ—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
        return messages;
      }
      allowedLandscapes = JSON.parse(allowedLandscapesRow[1]);
      if (typeof allowedLandscapes !== 'object' || Array.isArray(allowedLandscapes)) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] "–õ–∞–Ω–¥—à–∞—Ñ—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º.`);
        return messages;
      }

      // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∞–Ω–¥—à–∞—Ñ—Ç–æ–≤ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
      Object.keys(allowedLandscapes).forEach(type => {
        if (Array.isArray(allowedLandscapes[type])) {
          allowedLandscapes[type] = allowedLandscapes[type].map(l => l.toLowerCase());
        } else {
          messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –î–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${type}" –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º.`);
          allowedLandscapes[type] = [];
        }
      });

    } catch (e) {
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ù–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}`);
      return messages;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const provincesData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
    if (!provincesData || provincesData.length === 0) {
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return messages;
    }

    const provincesMap = {}; // id -> provinceObject
    const stateProvinces = []; // –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
    const allowedOtherProvinces = []; // –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤

    provincesData.forEach((row, index) => {
      const cell = row[0];
      if (cell) {
        try {
          const province = JSON.parse(cell);
          if (province.id) {
            provincesMap[province.id] = province;
            if (province.owner && typeof province.owner === 'string') {
              const ownerLower = province.owner.toLowerCase();
              if (ownerLower === stateName.toLowerCase()) {
                stateProvinces.push(province.id);
              } else if (accessibleCountries.includes(ownerLower)) {
                allowedOtherProvinces.push(province.id);
              }
            } else {
              messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ "owner".`);
            }
          } else {
            messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ "id".`);
          }
        } catch (e) {
          messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Ç—Ä–æ–∫–∞ ${index + 1}: ${e.message}`);
        }
      }
    });

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    messages.push(`[–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã] –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º: ${JSON.stringify(stateProvinces)}`);
    messages.push(`[–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã] –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—à–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º: ${JSON.stringify(allowedOtherProvinces)}`);

    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ç–æ–ª–∏—Ü, –≥—Ä—É–ø–ø–∏—Ä—É—è –∏—Ö –ø–æ –ø–ª–∞–Ω–µ—Ç–∞–º
    const capitalsByPlanet = {}; // planet -> capitalProvinceId
    stateProvinces.forEach(provinceId => {
      const province = provincesMap[provinceId];
      if (province && province.is_capital === true) {
        if (province.planet && Array.isArray(province.planet)) {
          province.planet.forEach(planet => {
            const planetLower = planet.toLowerCase();
            if (capitalsByPlanet[planetLower]) {
              messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ][updateResourcesAvailable] –ù–∞ –ø–ª–∞–Ω–µ—Ç–µ "${planet}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–∏—Ü–∞ "${capitalsByPlanet[planetLower]}". –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞ "${provinceId}" –Ω–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–∞.`);
            } else {
              capitalsByPlanet[planetLower] = provinceId;
              messages.push(`[–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã][–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è] –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–ª–∏—Ü–∞ "${provinceId}" –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ "${planet}".`);
            }
          });
        } else {
          messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceId}" –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å—Ç–æ–ª–∏—Ü–∞, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–µ—Ç.`);
        }
      }
    });

    if (Object.keys(capitalsByPlanet).length === 0) {
      messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–∏—Ü —Å—Ä–µ–¥–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –Ω–∞—à–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.`);
      return messages;
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    function isCoastalProvince(province) {
      return province.landscapes && Array.isArray(province.landscapes) &&
             province.landscapes.map(l => l.toLowerCase()).some(l => coastalLandscapes.includes(l));
    }

    function isMarineProvince(province) {
      return province.landscapes && Array.isArray(province.landscapes) &&
             (province.landscapes.map(l => l.toLowerCase()).includes('sea') ||
              province.landscapes.map(l => l.toLowerCase()).includes('ocean'));
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç–æ–ª–∏—Ü—ã –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
    function findAllRoutes(startId, endId, allowedProvinces, transportType, planetFilter = null, allowedLandscapesForTransport = null, requireMarine = false) {
      let routes = [];
      let queue = [[startId]];

      while (queue.length > 0) {
        let path = queue.shift();
        let last = path[path.length - 1];

        if (last === endId) {
          if (requireMarine) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –≤–∫–ª—é—á–∞–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ—Ä—Å–∫—É—é –ø—Ä–æ–≤–∏–Ω—Ü–∏—é
            const hasMarine = path.some(provinceId => isMarineProvince(provincesMap[provinceId]));
            if (!hasMarine) continue;
          }
          routes.push(path);
          continue;
        }

        if (!provincesMap[last] || !provincesMap[last].neighbors) {
          continue;
        }

        provincesMap[last].neighbors.forEach(neighborId => {
          if (allowedProvinces.includes(neighborId) && !path.includes(neighborId)) {
            let canAdd = true;

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if (transportType === 'air' || transportType === 'land' || transportType === 'water') {
              if (planetFilter) {
                const neighborProvince = provincesMap[neighborId];
                if (neighborProvince && neighborProvince.planet && Array.isArray(neighborProvince.planet)) {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞–Ω–µ—Ç–µ
                  const hasPlanet = neighborProvince.planet.map(p => p.toLowerCase()).some(p => planetFilter.includes(p));
                  if (!hasPlanet) {
                    canAdd = false;
                  }
                } else {
                  canAdd = false;
                }
              }
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º –¥–ª—è land –∏ water
            if ((transportType === 'land' || transportType === 'water') && allowedLandscapesForTransport) {
              const neighborProvince = provincesMap[neighborId];
              if (neighborProvince && neighborProvince.landscapes && Array.isArray(neighborProvince.landscapes)) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                const hasLandscape = neighborProvince.landscapes.map(l => l.toLowerCase()).some(l => allowedLandscapesForTransport.includes(l));
                if (!hasLandscape) {
                  canAdd = false;
                }
              } else {
                canAdd = false;
              }
            }

            if (canAdd) {
              queue.push([...path, neighborId]);
            }
          }
        });
      }

      return routes;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ—Ä—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤, –≤–∫–ª—é—á–∞—é—â–∏—Ö –∫–∞–∫ –Ω–∞–∑–µ–º–Ω—ã–µ, —Ç–∞–∫ –∏ –º–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    function findAllMarineRoutes(startId, endId, allowedProvinces, transportType, provincesMap) {
      let routes = [];
      let queue = [[startId]];

      while (queue.length > 0) {
        let path = queue.shift();
        let last = path[path.length - 1];

        if (last === endId) {
          // –¢—Ä–µ–±–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –±—ã–ª–∞ –ø—Ä–∏–±–µ—Ä–µ–∂–Ω–æ–π
          const provinceEnd = provincesMap[path[path.length - 1]];
          if (!isCoastalProvince(provinceEnd)) {
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –≤–∫–ª—é—á–∞–µ—Ç –º–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
          const hasMarine = path.some(provinceId => isMarineProvince(provincesMap[provinceId]));

          if (hasMarine) {
            routes.push(path);
          }
          continue;
        }

        if (!provincesMap[last] || !provincesMap[last].neighbors) {
          continue;
        }

        provincesMap[last].neighbors.forEach(neighborId => {
          if (allowedProvinces.includes(neighborId) && !path.includes(neighborId)) {
            let canAdd = true;

            // –î–ª—è –º–æ—Ä—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ –Ω–∞–∑–µ–º–Ω—ã–µ, —Ç–∞–∫ –∏ –º–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –ø–ª–∞–Ω–µ—Ç–µ
            const neighborProvince = provincesMap[neighborId];
            if (!neighborProvince || !neighborProvince.planet || !Array.isArray(neighborProvince.planet)) {
              canAdd = false;
            } else {
              // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–æ–π –∂–µ –ø–ª–∞–Ω–µ—Ç–µ, —á—Ç–æ –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è
              const startPlanets = provincesMap[startId].planet.map(p => p.toLowerCase());
              const neighborPlanets = neighborProvince.planet.map(p => p.toLowerCase());
              const commonPlanets = startPlanets.filter(p => neighborPlanets.includes(p));
              if (commonPlanets.length === 0) {
                canAdd = false;
              }
            }

            if (canAdd) {
              queue.push([...path, neighborId]);
            }
          }
        });
      }

      return routes;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ª–∞–Ω–¥—à–∞—Ñ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ allowedLandscapes
    const allowedLandscapesForEachTransport = {};
    transportTypes.forEach(transportType => {
      if (allowedLandscapes.hasOwnProperty(transportType)) {
        // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç, –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º
        if (allowedLandscapes[transportType].length > 0) {
          allowedLandscapesForEachTransport[transportType] = allowedLandscapes[transportType];
        } else {
          allowedLandscapesForEachTransport[transportType] = null; // –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        }
      } else {
        allowedLandscapesForEachTransport[transportType] = null; // –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      }
    });

    // –ü–∞—Ä—Å–∏–Ω–≥ transport_infrastructure —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const transportInfrastructureMap = {}; // provinceId -> transport_infrastructure Object

    const ownProvinces = stateProvinces; // –¢–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏

    ownProvinces.forEach(provinceId => {
      const province = provincesMap[provinceId];
      if (province && province.transport_infrastructure) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
        transportTypes.forEach(type => {
          let transportTypeObj = province.transport_infrastructure.types.find(t => t.type === type);
          if (!transportTypeObj) {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            transportTypeObj = {
              type: type,
              capacity: {},
              available: {}
            };
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            resourceCategories.forEach(resource => {
              transportTypeObj.capacity[resource] = 0;
              transportTypeObj.available[resource] = 0;
            });
            province.transport_infrastructure.types.push(transportTypeObj);
            messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceId}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${type}". –î–æ–±–∞–≤–ª–µ–Ω —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.`);
          } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
            resourceCategories.forEach(resource => {
              if (typeof transportTypeObj.capacity[resource] !== 'number') {
                transportTypeObj.capacity[resource] = 0;
                messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceId}", —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç "${transportTypeDescriptions[type]}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—Å—É—Ä—Å "capacity.${resource}". –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 0.`);
              }
              if (typeof transportTypeObj.available[resource] !== 'number') {
                transportTypeObj.available[resource] = 0;
                messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceId}", —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç "${transportTypeDescriptions[type]}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—Å—É—Ä—Å "available.${resource}". –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 0.`);
              }
            });
          }
        });
        transportInfrastructureMap[provinceId] = province.transport_infrastructure;
      } else {
        messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceId}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "transport_infrastructure". –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.`);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        transportInfrastructureMap[provinceId] = {
          types: transportTypes.map(type => ({
            type: type,
            capacity: resourceCategories.reduce((acc, resource) => {
              acc[resource] = 0;
              return acc;
            }, {}),
            available: resourceCategories.reduce((acc, resource) => {
              acc[resource] = 0;
              return acc;
            }, {})
          }))
        };
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
    stateProvinces.forEach(destinationId => {
      const destinationProvince = provincesMap[destinationId];
      if (!destinationProvince) {
        messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${destinationId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ provincesMap.`);
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–∏–Ω—Ü–∏—è
      const destinationPlanets = destinationProvince.planet.map(p => p.toLowerCase());

      // –î–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞–Ω–µ—Ç—ã –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏, –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–æ–ª–∏—Ü—É
      destinationPlanets.forEach(planet => {
        const capitalId = capitalsByPlanet[planet];
        if (!capitalId) {
          messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ù–∞ –ø–ª–∞–Ω–µ—Ç–µ "${planet}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–ª–∏—Ü–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${destinationId}".`);
          return;
        }

        // –ï—Å–ª–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è —Å–∞–º–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (destinationId === capitalId) {
          return;
        }

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        transportTypes.forEach(transportType => {
          resourceCategories.forEach(resource => {
            let routes = [];

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            let allowedProvincesForTransportType = [...stateProvinces, ...allowedOtherProvinces];

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º
            let allowedLandscapesForTransport = null;
            if (allowedLandscapesForEachTransport.hasOwnProperty(transportType)) {
              if (allowedLandscapesForEachTransport[transportType] !== null) {
                allowedLandscapesForTransport = allowedLandscapesForEachTransport[transportType].map(l => l.toLowerCase());
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ª–∞–Ω–¥—à–∞—Ñ—Ç–æ–≤
                allowedProvincesForTransportType = allowedProvincesForTransportType.filter(provinceId => {
                  const province = provincesMap[provinceId];
                  if (province && province.landscapes && Array.isArray(province.landscapes)) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                    return province.landscapes.map(l => l.toLowerCase()).some(l => allowedLandscapesForTransport.includes(l));
                  }
                  return false;
                });

                if (allowedProvincesForTransportType.length === 0) {
                  const transportTypeDesc = transportTypeDescriptions[transportType] || transportType;
                  const resourceCategoryDesc = resourceCategoryDescriptions[resource] || resource;
                  messages.push(`[–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã][–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è] –ù–µ—Ç –ø—Ä–æ–≤–∏–Ω—Ü–∏–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${transportTypeDesc}" –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ "${resourceCategoryDesc}".`);
                  return; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                }
              }
              // –ï—Å–ª–∏ allowedLandscapesForEachTransport[transportType] === null, –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º
            }

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–ª–∞–Ω–µ—Ç –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–¥–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã
            let planetFilter = null;
            if (transportType === 'air' || transportType === 'land' || transportType === 'water') {
              const capitalProvince = provincesMap[capitalId];
              const destinationProvince = provincesMap[destinationId];

              if (!capitalProvince.planet || !Array.isArray(capitalProvince.planet) ||
                  !destinationProvince.planet || !Array.isArray(destinationProvince.planet)) {
                messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${capitalId}" –∏–ª–∏ "${destinationId}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á—É "planet".`);
                return; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
              }

              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –º–µ–∂–¥—É —Å—Ç–æ–ª–∏—Ü–µ–π –∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–µ–π
              const commonPlanets = capitalProvince.planet.map(p => p.toLowerCase()).filter(p => destinationProvince.planet.map(dp => dp.toLowerCase()).includes(p));

              if (commonPlanets.length === 0) {
                const transportTypeDesc = transportTypeDescriptions[transportType] || transportType;
                messages.push(`[–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã][–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è] –ù–µ—Ç –æ–±—â–∏—Ö –ø–ª–∞–Ω–µ—Ç –º–µ–∂–¥—É —Å—Ç–æ–ª–∏—Ü–µ–π ("${capitalId}") –∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–µ–π "${destinationId}" –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${transportTypeDesc}".`);
                return; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
              }

              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–ª–∞–Ω–µ—Ç –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, —Ç—Ä–µ–±—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞–Ω–µ—Ç–µ
              planetFilter = commonPlanets;
            }

            if (transportType === 'space') {
              // –î–ª—è —Ç–∏–ø–∞ 'space' –º–∞—Ä—à—Ä—É—Ç –≤—Å–µ–≥–¥–∞ –ø—Ä—è–º–æ–π
              routes.push([capitalId, destinationId]);
            } else if (transportType === 'air' || transportType === 'land') {
              // –î–ª—è —Ç–∏–ø–æ–≤ 'air' –∏ 'land' –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
              routes = findAllRoutes(
                capitalId,
                destinationId,
                allowedProvincesForTransportType,
                transportType,
                planetFilter,
                allowedLandscapesForTransport,
                false // –ù–µ —Ç—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
              );
            } else if (transportType === 'water') {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è 'water'
              routes = findAllMarineRoutes(
                capitalId,
                destinationId,
                allowedProvincesForTransportType,
                transportType,
                provincesMap
              );
            }

            if (routes.length === 0) {
              const transportTypeDesc = transportTypeDescriptions[transportType] || transportType;
              const resourceCategoryDesc = resourceCategoryDescriptions[resource] || resource;
              messages.push(`[–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç —Å—Ç–æ–ª–∏—Ü—ã ("${capitalId}") –¥–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${destinationId}" –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${transportTypeDesc}" –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ "${resourceCategoryDesc}".`);
              return; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            }

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            let optimalRoute = null;
            let maxMinValue = -Infinity;

            routes.forEach(route => {
              let minValue = Infinity;
              route.forEach(provinceId => {
                const transport = transportInfrastructureMap[provinceId];
                if (transport && transport.types) {
                  const typeObj = transport.types.find(t => t.type === transportType);
                  if (typeObj && typeof typeObj.capacity[resource] === 'number') {
                    // –î–ª—è 'water' —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–±–µ—Ä–µ–∂–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ minValue
                    if (transportType === 'water') {
                      const province = provincesMap[provinceId];
                      if (isCoastalProvince(province)) {
                        if (typeObj.capacity[resource] < minValue) {
                          minValue = typeObj.capacity[resource];
                        }
                      }
                    } else {
                      if (typeObj.capacity[resource] < minValue) {
                        minValue = typeObj.capacity[resource];
                      }
                    }
                  } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ transportType.resource, —Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ 0
                    minValue = 0;
                  }
                } else {
                  // –ï—Å–ª–∏ –Ω–µ—Ç transport_infrastructure, —Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ 0
                  minValue = 0;
                }
              });

              // –î–ª—è 'water', –µ—Å–ª–∏ minValue –æ—Å—Ç–∞–ª–æ—Å—å Infinity (—Ç.–µ. –Ω–µ –±—ã–ª–æ –ø—Ä–∏–±–µ—Ä–µ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
              if (transportType === 'water' && minValue === Infinity) {
                minValue = 0;
              }

              if (minValue > maxMinValue) {
                maxMinValue = minValue;
                optimalRoute = route;
              }
            });

            if (optimalRoute) {
              // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
              const transportTypeDesc = transportTypeDescriptions[transportType] || transportType;
              const resourceCategoryDesc = resourceCategoryDescriptions[resource] || resource;

              // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ available.transportType.resource –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è destinationId
              const destinationTransport = transportInfrastructureMap[destinationId];
              if (destinationTransport && destinationTransport.types) {
                const typeObj = destinationTransport.types.find(t => t.type === transportType);
                if (typeObj && typeObj.available && typeof typeObj.available[resource] === 'number') {
                  if (transportType === 'water') {
                    // –î–ª—è 'water' —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º available –Ω–∞ –æ—Å–Ω–æ–≤–µ maxMinValue, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–±–µ—Ä–µ–∂–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
                    typeObj.available[resource] = maxMinValue; // –ó–∞–º–µ–Ω—è–µ–º –≤–º–µ—Å—Ç–æ Math.min
                  } else {
                    typeObj.available[resource] = Math.min(typeObj.available[resource], maxMinValue);
                  }
                  messages.push(`[–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤] üåè–î–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ ${destinationId} —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ${transportTypeDesc} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ ${resourceCategoryDesc} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${typeObj.available[resource]} –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä—à—Ä—É—Ç–∞ ${optimalRoute.join(' ‚Ü† ')}.`);
                } else {
                  messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${destinationId}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–π "${transportType}" –∏–ª–∏ "available.${resource}" –≤ transport_infrastructure.`);
                }
              } else {
                messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${destinationId}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "transport_infrastructure".`);
              }
            } else {
              const transportTypeDesc = transportTypeDescriptions[transportType] || transportType;
              const resourceCategoryDesc = resourceCategoryDescriptions[resource] || resource;
              messages.push(`[–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã][–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è] –ù–µ –Ω–∞–π–¥–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${destinationId}", –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ "${resourceCategoryDesc}" –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${transportTypeDesc}".`);
            }
          });
        });
      });
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –≤ data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
    const updatedProvincesData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'].map((row, index) => {
      const cell = row[0];
      if (cell) {
        try {
          const province = JSON.parse(cell);
          if (province.id && transportInfrastructureMap[province.id]) {
            // –û–±–Ω–æ–≤–ª—è–µ–º transport_infrastructure —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
            province.transport_infrastructure = transportInfrastructureMap[province.id];
            return [JSON.stringify(province)];
          } else {
            return row;
          }
        } catch (e) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
          return row;
        }
      } else {
        return row;
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º data
    data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] = updatedProvincesData;

  } catch (error) {
    messages.push(`[–û—à–∏–±–∫–∞][updateResourcesAvailable] ${error.message}`);
  }

  return messages;
}
