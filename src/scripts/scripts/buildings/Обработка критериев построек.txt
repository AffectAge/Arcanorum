Option Explicit

Sub UpdateBuildingStatus_MultipleBuildings_WithDynamicCriteria()
    Dim wsProvinces As Worksheet
    Dim wsTemplates As Worksheet
    Dim wsLog As Worksheet
    Dim tblProvinces As ListObject
    Dim tblTemplates As ListObject
    Dim tblLog As ListObject
    Dim lastRowProvinces As Long
    Dim lastRowTemplates As Long
    Dim lastRowLog As Long
    Dim i As Long, k As Long
    Dim buildingsCell As String
    Dim buildingName As String
    Dim xmlCondition As String
    Dim dictTemplates As Object
    Dim updatedBuildings As String
    Dim xmlDoc As Object
    Dim unmetConditions As Collection
    Dim explanation As Collection
    Dim buildingCount As Integer
    Dim criteriaPairs As Variant
    Dim pair As Variant
    Dim provinceCriteriaDicts As Object
    Dim isActive As Boolean
    Dim reasons As String
    
    ' Configuration for criteria pairs
    criteriaPairs = Array( _
        Array("Критерии ландшафта", "Ландшафт провинции", "Ландшафт"), _
        Array("Критерии культур", "Культуры провинции", "Культура") _
    )
    
    ' Set references to worksheets
    On Error GoTo ErrorHandler
    Set wsProvinces = ThisWorkbook.Sheets("Провинции")
    Set wsTemplates = ThisWorkbook.Sheets("Шаблоны построек")
    
    ' Set references to tables
    Set tblProvinces = wsProvinces.ListObjects("ProvincesTable")
    Set tblTemplates = wsTemplates.ListObjects("TemplatesTable")
    
    ' Ensure event log sheet and table exist
    On Error Resume Next
    Set wsLog = ThisWorkbook.Sheets("Журнал событий")
    Set tblLog = wsLog.ListObjects("LogTable")
    On Error GoTo 0
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.name = "Журнал событий"
        wsLog.range("A1").value = "Сообщение"
        wsLog.range("B1").value = "Уровень"
        Set tblLog = wsLog.ListObjects.Add(xlSrcRange, wsLog.range("A1:B1"), , xlYes)
        tblLog.name = "LogTable"
    ElseIf tblLog Is Nothing Then
        wsLog.range("A1").value = "Сообщение"
        wsLog.range("B1").value = "Уровень"
        Set tblLog = wsLog.ListObjects.Add(xlSrcRange, wsLog.range("A1:B1"), , xlYes)
        tblLog.name = "LogTable"
    End If
    
    ' Initialize the template dictionary
    Set dictTemplates = CreateObject("Scripting.Dictionary")
    
    ' Populate the dictionary with template XML conditions
    lastRowTemplates = tblTemplates.ListRows.Count
    With tblTemplates
        For i = 1 To lastRowTemplates
            buildingName = Trim(.ListRows(i).range(1, .ListColumns("Название постройки").index).value)
            If buildingName <> "" Then
                Dim criteriaDict As Object
                Set criteriaDict = CreateObject("Scripting.Dictionary")
                
                For k = LBound(criteriaPairs) To UBound(criteriaPairs)
                    pair = criteriaPairs(k)
                    xmlCondition = Trim(.ListRows(i).range(1, .ListColumns(pair(0)).index).value)
                    If xmlCondition <> "" Then
                        criteriaDict(pair(2)) = xmlCondition
                    Else
                        criteriaDict(pair(2)) = ""
                    End If
                Next k
                
                dictTemplates(buildingName) = criteriaDict
            End If
        Next i
    End With
    
    ' Determine the last filled row in the Provinces table
    lastRowProvinces = tblProvinces.ListRows.Count
    
    ' Optimize by disabling screen updates and automatic calculations
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    ' Process each row in Provinces table
    With tblProvinces
        For i = 1 To lastRowProvinces
            buildingsCell = .ListRows(i).range(1, .ListColumns("Постройки провинции").index).value
            updatedBuildings = ""
            
            If buildingsCell <> "" Then
                Set xmlDoc = CreateObject("MSXML2.DOMDocument")
                xmlDoc.LoadXML buildingsCell
                
                ' Parse building entries in XML format
                Dim buildingNode As Object
                For Each buildingNode In xmlDoc.SelectNodes("//Building")
                    buildingName = buildingNode.Attributes.getNamedItem("name").Text
                    buildingCount = CInt(buildingNode.Attributes.getNamedItem("count").Text)
                    
                    If buildingName <> "" And dictTemplates.Exists(buildingName) Then
                        Dim buildingCriteriaDict As Object
                        Set buildingCriteriaDict = dictTemplates(buildingName)
                        
                        reasons = ""
                        isActive = True
                        
                        For k = LBound(criteriaPairs) To UBound(criteriaPairs)
                            pair = criteriaPairs(k)
                            Dim criteriaType As String
                            criteriaType = pair(2)
                            xmlCondition = buildingCriteriaDict(criteriaType)
                            
                            If xmlCondition <> "" Then
                                Dim conditionDoc As Object
                                Set conditionDoc = CreateObject("MSXML2.DOMDocument")
                                conditionDoc.LoadXML xmlCondition
                                
                                Set unmetConditions = New Collection
                                Set explanation = New Collection
                                
                                Dim conditionMet As Boolean
                                conditionMet = EvaluateXMLCondition(conditionDoc.DocumentElement, provinceCriteriaDicts(criteriaType), unmetConditions, explanation, criteriaType)
                                
                                If Not conditionMet Then
                                    isActive = False
                                    reasons = reasons & criteriaType & " conditions not met:" & vbCrLf & JoinConditions(explanation) & vbCrLf
                                End If
                            End If
                        Next k
                        
                        If isActive Then
                            updatedBuildings = updatedBuildings & buildingName & ":Active; "
                        Else
                            updatedBuildings = updatedBuildings & buildingName & ":Inactive; "
                            ' Log issue for inactive buildings
                            With tblLog
                                .ListRows.Add
                                lastRowLog = .ListRows.Count
                                .ListRows(lastRowLog).range(1, .ListColumns("Сообщение").index).value = _
                                    "Province " & .ListRows(i).range(1, .ListColumns("Название провинции").index).value & _
                                    ": building " & buildingName & " (" & buildingCount & " units) is inactive." & vbCrLf & "Reason:" & vbCrLf & reasons
                                .ListRows(lastRowLog).range(1, .ListColumns("Уровень").index).value = "WARNING"
                            End With
                        End If
                    Else
                        updatedBuildings = updatedBuildings & buildingName & ":Template not found; "
                    End If
                Next buildingNode
                
                If Len(updatedBuildings) > 2 Then
                    updatedBuildings = Left(updatedBuildings, Len(updatedBuildings) - 2)
                End If
                .ListRows(i).range(1, .ListColumns("Постройки провинции").index).value = updatedBuildings
            Else
                .ListRows(i).range(1, .ListColumns("Постройки провинции").index).value = "No buildings"
            End If
        Next i
    End With
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    MsgBox "Building statuses updated successfully!", vbInformation
    Exit Sub

ErrorHandler:
    MsgBox "An error occurred: " & Err.Description, vbCritical
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
End Sub
