function importNamedRangesInfo() {
  var startTime = new Date();
  try {
    var cache = CacheService.getScriptCache();

    // Получаем JSON с ссылками из 'Переменные_Ссылки'
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var linksRange = ss.getRangeByName('Переменные_Ссылки');
    var linksJson = linksRange.getValue();
    var links = JSON.parse(linksJson);

    var importTasks = [

      // Импорт данных провинций
      {
        sourceLinkKey: "maplink", // Ключ для получения ссылки из JSON
        sourceRangeName: "Провинции_ОсновнаяИнформация",
        targetRangeName: "Провинции_ОсновнаяИнформация",
        priority: 1
      },
      // Импорт списка государств
      {
        sourceLinkKey: "maplink", // Ключ для получения ссылки из JSON
        sourceRangeName: "СписокГосударств_Информация",
        targetRangeName: "СписокГосударств_Информация",
        priority: 1
      },
      // Импорт списка государств
      {
        sourceLinkKey: "maplink", // Ключ для получения ссылки из JSON
        sourceRangeName: "СписокОрганизаций_Информация",
        targetRangeName: "СписокОрганизаций_Информация",
        priority: 1
      }
      // Добавьте сюда больше задач, если необходимо
    ];
    
    // Сортировка задач по приоритету
    importTasks.sort((a, b) => a.priority - b.priority);

    var openedSpreadsheets = {};
    var allRangesMatch = true; // Флаг для проверки корректности размеров диапазонов

    // Предварительная проверка размеров диапазонов
    importTasks.forEach(task => {
      var sourceSpreadsheetUrl = links[task.sourceLinkKey]; // Получаем ссылку по ключу из JSON

      // Проверяем наличие ссылки
      if (!sourceSpreadsheetUrl) {
        var errorMessage = `Ошибка: Ключ '${task.sourceLinkKey}' отсутствует в 'Переменные_Ссылки'.`;
        Logger.log(errorMessage);
        ss.toast(errorMessage, "Ошибка импорта данных");
        allRangesMatch = false;
        return; // Пропускаем эту задачу
      }
      
      // Кэширование книги
      if (!openedSpreadsheets[sourceSpreadsheetUrl]) {
        var cachedSpreadsheetId = cache.get(sourceSpreadsheetUrl);
        if (cachedSpreadsheetId) {
          openedSpreadsheets[sourceSpreadsheetUrl] = SpreadsheetApp.openById(cachedSpreadsheetId);
        } else {
          openedSpreadsheets[sourceSpreadsheetUrl] = SpreadsheetApp.openByUrl(sourceSpreadsheetUrl);
          cache.put(sourceSpreadsheetUrl, openedSpreadsheets[sourceSpreadsheetUrl].getId(), 21600); // Кэширование на 6 часов
        }
      }
      
      var sourceSpreadsheet = openedSpreadsheets[sourceSpreadsheetUrl];
      var sourceRange = sourceSpreadsheet.getRangeByName(task.sourceRangeName);
      var targetRange = ss.getRangeByName(task.targetRangeName);

      var sourceHeight = sourceRange.getHeight();
      var sourceWidth = sourceRange.getWidth();
      var targetHeight = targetRange.getHeight();
      var targetWidth = targetRange.getWidth();

      // Проверка на совпадение размеров диапазонов
      if (sourceHeight !== targetHeight || sourceWidth !== targetWidth) {
        var errorMessage = `Ошибка: Размеры исходного (${sourceHeight}x${sourceWidth}) и целевого (${targetHeight}x${targetWidth}) диапазонов не совпадают для задачи с приоритетом ${task.priority}.`;
        Logger.log(errorMessage);
        ss.toast(errorMessage, "Ошибка импорта данных");
        allRangesMatch = false;
      }
    });

    // Если размеры всех диапазонов совпадают, выполняем импорт данных
    if (allRangesMatch) {
      importTasks.forEach(task => {
        var sourceSpreadsheetUrl = links[task.sourceLinkKey];

        // Проверяем наличие ссылки
        if (!sourceSpreadsheetUrl) {
          // Эта ошибка уже была обработана в предварительной проверке
          return;
        }

        var sourceSpreadsheet = openedSpreadsheets[sourceSpreadsheetUrl];
        var sourceRange = sourceSpreadsheet.getRangeByName(task.sourceRangeName);
        var targetRange = ss.getRangeByName(task.targetRangeName);
        
        var sourceData = sourceRange.getValues();

        // Записываем данные в целевой диапазон
        targetRange.setValues(sourceData);
      });
    } else {
      ss.toast("Импорт данных не выполнен из-за несоответствия размеров диапазонов", "Ошибка");
    }

    logResult("importNamedRangesInfo", "", (new Date() - startTime) / 1000, "Успешно");
  } catch (e) {
    logResult("importNamedRangesInfo", e.toString(), (new Date() - startTime) / 1000, "Ошибка");
  }
}
