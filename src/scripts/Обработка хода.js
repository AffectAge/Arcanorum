/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
 */
function scanNamedRanges() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getActiveSheet(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç

  // –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å (–∏—Å–∫–ª—é—á–∞–µ–º –ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π)
  const rangeNamesToRead = [
    '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
    '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π_–†—ã–Ω–æ–∫',
    '–¢–æ—Ä–≥–æ–≤—ã–µ_–ü–∞—Ä—Ç–Ω—ë—Ä—ã',
    '–¢–æ–≤–∞—Ä—ã',
    '–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã',
    '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '–ù–∞—Å–µ–ª–µ–Ω–∏–µ_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
  ];

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤
  const allNamedRanges = spreadsheet.getNamedRanges();
  
  // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {–∏–º—è–î–∏–∞–ø–∞–∑–æ–Ω–∞: –æ–±—ä–µ–∫—ÇRange}
  const namedRangeMap = {};
  allNamedRanges.forEach(namedRange => {
    const name = namedRange.getName();
    namedRangeMap[name] = namedRange.getRange();
  });

  // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  let data = {};

  try {
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    rangeNamesToRead.forEach(rangeName => {
      const range = namedRangeMap[rangeName];
      if (range) {
        data[rangeName] = range.getValues();
      } else {
        const errorMsg = `–î–∏–∞–ø–∞–∑–æ–Ω —Å –∏–º–µ–Ω–µ–º "${rangeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        addMessagesToRange4([`[–û—à–∏–±–∫–∞] ${errorMsg}`], spreadsheet);
        throw new Error(errorMsg);
      }
    });

    // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ç–æ—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processTurn(data, sheet, spreadsheet);

  } catch (error) {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ –ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π
    const errorMessage = `[–û—à–∏–±–∫–∞] scanNamedRanges: ${error.message}`;
    addMessagesToRange4([errorMessage], spreadsheet);
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞
 */
function processTurn(data, sheet, spreadsheet) {
  let allNewMessages = [];

  try {
    // –ú–∞—Å—Å–∏–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã–∑–æ–≤–∞
    const functionsToRun = [
      // –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º–∏
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è GNN', func: () => processInitialMessages(data, sheet, spreadsheet) },

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ—Å—Ç—Ä–æ–µ–∫
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ—Å—Ç—Ä–æ–µ–∫', func: () => processBuildingsCriterias(data, sheet, spreadsheet) },
      { name: '–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –∑–¥–∞–Ω–∏–π –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏', func: () => updateProvinceRequiredBuildings(data, spreadsheet) },
      { name: '–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –∑–¥–∞–Ω–∏–π –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ', func: () => updateStateRequiredBuildings(data, spreadsheet) },
      { name: '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π', func: () => copyMatchingProvincesToAllowed(data, spreadsheet) },

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é', func: () => processProvinceLimits(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', func: () => processStateLimits(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –º–∏—Ä', func: () => processWorldLimits(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤', func: () => processRequiredResources(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∑–µ–º–µ–ª—å', func: () => processArableLandRequirements(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–∞–ª–∏—á–∏—è —Ä–∞–±–æ—á–∏—Ö', func: () => processRequiredWorkers(data, spreadsheet) },

      { name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–¥–∞–Ω–∏–π', func: () => updateBuildingsStatuses(data, spreadsheet) },
      { name: '–ó–∞–Ω—è—Ç–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–∫ —Ä–∞–±–æ—á–∏–º–∏', func: () => processEmployment(data, spreadsheet) },

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      { name: '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤', func: () => updateResourcesAvailable(data, spreadsheet) },

      // –¢–æ—Ä–≥–æ–≤–ª—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
      { name: '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏', func: () => processSalesForBuildings(data, spreadsheet) },
      { name: '–ó–∞–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏', func: () => processPurchaseGoodsForBuildings(data, spreadsheet) },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–±—å—è–≤–ª–µ–Ω–∏–π', func: () => processBuildingTradeOrders(data, spreadsheet) },
      { name: '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤', func: () => processResourceConsumption(data, spreadsheet) },
      { name: '–î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤', func: () => processResourceExtraction(data, spreadsheet) },
      { name: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤', func: () => processResourceProduction(data, spreadsheet) },

      { name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', func: () => updateTradeStatistics(data, spreadsheet) }
    ];

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (let i = 0; i < functionsToRun.length; i++) {
      const { name, func } = functionsToRun[i];
      try {
        const start = Date.now();
        const result = func();
        const duration = ((Date.now() - start) / 1000).toFixed(2);
        allNewMessages.push(`[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] üõ†Ô∏è ${name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ‚è≥${duration} —Å–µ–∫.`);

        if (Array.isArray(result)) {
          allNewMessages.push(...result);
        }
      } catch (error) {
        allNewMessages.push(`[–û—à–∏–±–∫–∞] –í —Ñ—É–Ω–∫—Ü–∏–∏ ${name}: ${error.message}`);
      }
    }

    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–≤–∞ –∂—É—Ä–Ω–∞–ª–∞
    const standardMessages = [];
    const gnnMessages = [];

    allNewMessages.forEach(msg => {
      if (typeof msg === 'string') {
        if (msg.startsWith('[GNN]')) {
          const cleanMsg = msg.slice(5).trim(); // –£–¥–∞–ª—è–µ–º [GNN]
          gnnMessages.push(cleanMsg);
        } else {
          standardMessages.push(msg);
        }
      }
    });

    // –ó–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª—ã
    if (standardMessages.length > 0) {
      addMessagesToRange4(standardMessages, spreadsheet);
    }
    if (gnnMessages.length > 0) {
      addMessagesToRange5(gnnMessages, spreadsheet);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    updateRanges(data, spreadsheet);

  } catch (error) {
    const errorMessage = `[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –û—à–∏–±–∫–∞] processTurn: ${error.message}`;
    addMessagesToRange4([errorMessage], spreadsheet);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
 *
 * @param {Object} updatedData - –û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * @param {Spreadsheet} spreadsheet - –û–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
function updateRanges(updatedData, spreadsheet) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  const blacklist = new Set(['–ñ—É—Ä–Ω–∞–ª_–°–æ–±—ã—Ç–∏–π']);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ API
  const namedRanges = spreadsheet.getNamedRanges();

  // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É: {–∏–º—è–î–∏–∞–ø–∞–∑–æ–Ω–∞: –æ–±—ä–µ–∫—ÇRange}
  const namedRangeMap = {};
  namedRanges.forEach(namedRange => {
    namedRangeMap[namedRange.getName()] = namedRange.getRange();
  });

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
  const errorMessages = [];

  // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
  for (const [rangeName, values] of Object.entries(updatedData)) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if (blacklist.has(rangeName)) {
      continue;
    }

    const range = namedRangeMap[rangeName];
    if (range) {
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        range.setValues(values);
      } catch (error) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        errorMessages.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω "${rangeName}": ${error.message}`);
      }
    } else {
      // –î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      errorMessages.push(`–î–∏–∞–ø–∞–∑–æ–Ω —Å –∏–º–µ–Ω–µ–º "${rangeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.`);
    }
  }

  // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
  if (errorMessages.length > 0) {
    const combinedErrorMsg = errorMessages.join('\n');
    logErrorToEventLog(combinedErrorMsg, spreadsheet);
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  SpreadsheetApp.flush();
}
