function processBuildingTradeOrders(data) {
  const newMessages = [];
  Logger.log("[INFO] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã processBuildingTradeOrders");

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ
    let stateName;
    try {
      const targetIdentifier = '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞';
      const targetRow = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ']?.find(row => row[0] === targetIdentifier);

      if (targetRow && targetRow[1]) {
        const jsonMatch = targetRow[1].match(/\{.*\}/);
        if (jsonMatch) {
          const variablesJson = JSON.parse(jsonMatch[0]);
          stateName = variablesJson.state_name;
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —è—á–µ–π–∫–∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
        }
      } else {
        throw new Error(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${targetIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }
    } catch (e) {
      Logger.log(`[ERROR] ${e.message}`);
      return newMessages;
    }
    Logger.log(`[INFO] –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ: ${stateName}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] || [];
    const marketData = data['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π_–†—ã–Ω–æ–∫'] || [];

    Logger.log(`[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–¥–∞–Ω–∏–π: ${buildingsData.length}`);
    Logger.log(`[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ä—ã–Ω–∫–∞: ${marketData.length}`);

    // -------------------------------------------------
    // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    // -------------------------------------------------
    buildingsData.forEach((row, rowIndex) => {
      const cell = row[0];
      if (!cell || cell.trim() === "") return;

      try {
        Logger.log(`[DEBUG] –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: ${cell}`);

        const buildingsArray = JSON.parse(cell);
        if (!Array.isArray(buildingsArray) || buildingsArray.length === 0) {
          Logger.log(`[ERROR] –î–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
          return;
        }

        buildingsArray.forEach((building, bIndex) => {
          if (building.building_owner !== stateName || !Array.isArray(building.trade_orders)) {
            return;
          }

          Logger.log(`[INFO] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–¥–∞–Ω–∏—è: ${building.building_name}`);

          // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
          building.trade_orders = building.trade_orders.filter(orderId => {
            let orderFound = false;

            for (let i = 0; i < marketData.length; i++) {
              let orders = JSON.parse(marketData[i][0] || "[]");

              const orderIndex = orders.findIndex(order => order.order_id === orderId);
              if (orderIndex === -1) continue;

              orderFound = true;
              const order = orders[orderIndex];

              // üì• –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–æ—Ö–æ–¥ –≤ –ø–æ—Å—Ç—Ä–æ–π–∫—É
              if (!building.incomes) {
                building.incomes = 0;
              }
              building.incomes += order.income;
              order.income = 0;

              Logger.log(`[SUCCESS] –î–æ—Ö–æ–¥ ${order.income} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ ${building.building_name}`);

              // üèõ –ü—Ä–æ–≤–µ—Ä—è–µ–º availableQuantity
              if (order.availableQuantity === 0) {
                orders.splice(orderIndex, 1);
                Logger.log(`[INFO] –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${orderId} —É–¥–∞–ª–µ–Ω–æ (—Ç–æ–≤–∞—Ä —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω)`);
                return false;
              }

              // ‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º turns_left
              if (order.turns_left === 0) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –ø–æ—Å—Ç—Ä–æ–π–∫—É
                if (!building.warehouse[order.name]) {
                  building.warehouse[order.name] = { current_quantity: 0, reserve_level: 0 };
                }
                building.warehouse[order.name].current_quantity += order.availableQuantity;

                // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                orders.splice(orderIndex, 1);
                Logger.log(`[INFO] –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${orderId} —É–¥–∞–ª–µ–Ω–æ (–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è), —Ç–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω`);
                return false;
              }

              // ‚è¨ –£–º–µ–Ω—å—à–∞–µ–º turns_left
              order.turns_left -= 1;
              Logger.log(`[INFO] –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${orderId}: turns_left —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ ${order.turns_left}`);

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
              marketData[i][0] = JSON.stringify(orders);
              return true;
            }

            if (!orderFound) {
              Logger.log(`[WARNING] –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ä—ã–Ω–∫–µ, —É–¥–∞–ª—è–µ–º`);
              return false;
            }

            return true;
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ `data`
          data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'][rowIndex][0] = JSON.stringify(buildingsArray);
        });
      } catch (err) {
        Logger.log(`[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${err.message}`);
      }
    });

  } catch (error) {
    Logger.log(`[ERROR] ${error.message}`);
  }

  return newMessages;
}