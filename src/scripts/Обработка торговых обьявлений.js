function processBuildingTradeOrders(data) {
  const newMessages = [];
  Logger.log("[INFO] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã processSalesForBuildings");

  try {
    // -------------------------------------------------
    // 0. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    // -------------------------------------------------
    let stateName;
    try {
      const targetIdentifier = '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞';
      const targetRow = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ']?.find(row => row[0] === targetIdentifier);

      if (targetRow && targetRow[1]) {
        const jsonMatch = targetRow[1].match(/\{.*\}/);
        if (jsonMatch) {
          const variablesJson = JSON.parse(jsonMatch[0]);
          stateName = variablesJson.state_name;
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —è—á–µ–π–∫–∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
        }
      } else {
        throw new Error(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${targetIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }
    } catch (e) {
      Logger.log(`[ERROR] ${e.message}`);
      return newMessages;
    }
    Logger.log(`[INFO] –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ: ${stateName}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const provincesData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] || [];
    const marketData = data['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π_–†—ã–Ω–æ–∫'] || [];
    const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] || [];

    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    const provinceMap = {};
    provincesData.forEach((row) => {
      if (!row[0]) return;
      try {
        const province = JSON.parse(row[0]);
        provinceMap[province.id] = province;
      } catch (err) {
        Logger.log(`[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏: ${err.message}`);
      }
    });

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ order_id –∏–∑ trade_orders –Ω–∞—à–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫
    const ourOrderIds = new Set();
    buildingsData.forEach((buildingRow) => {
      const cell = buildingRow[0];
      if (!cell) return;

      try {
        const buildings = JSON.parse(cell);
        buildings.forEach(building => {
          if (building.building_owner === stateName && building.status === "–ê–∫—Ç–∏–≤–Ω–∞—è" && building.trade_orders) {
            building.trade_orders.forEach(orderId => ourOrderIds.add(orderId));
          }
        });
      } catch (err) {
        Logger.log(`[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π: ${err.message}`);
      }
    });

    // –£–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ä—ã–Ω–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–∞—à–∏—Ö trade_orders
    marketData.forEach((marketRow, rowIndex) => {
      let orders = [];
      try {
        orders = JSON.parse(marketRow[0] || "[]");
      } catch (e) {
        return;
      }

      const ordersToKeep = [];
      orders.forEach(order => {
        if (order.country === stateName && !ourOrderIds.has(order.order_id)) {
          newMessages.push(`[üóëÔ∏è –£–¥–∞–ª–µ–Ω] –û—Ä–¥–µ—Ä ${order.order_id}: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ trade_orders.`);
        } else {
          ordersToKeep.push(order);
        }
      });

      if (orders.length !== ordersToKeep.length) {
        marketRow[0] = JSON.stringify(ordersToKeep);
      }
    });

    // -------------------------------------------------
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–∞–Ω–∏—è –∏ –∏—Ö –æ—Ä–¥–µ—Ä—ã
    // -------------------------------------------------
    buildingsData.forEach((buildingRow, rowIndex) => {
      const cell = buildingRow[0];
      if (!cell) return;

      try {
        const buildings = JSON.parse(cell);
        let updated = false;

        buildings.forEach(building => {
          if (building.building_owner !== stateName || building.status !== "–ê–∫—Ç–∏–≤–Ω–∞—è") return;
          if (!building.trade_orders || building.trade_orders.length === 0) return;

          const ordersToRemove = [];
          building.trade_orders.forEach(orderId => {
            let orderFound = false;

            // –ü–æ–∏—Å–∫ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
            for (let mRow = 0; mRow < marketData.length; mRow++) {
              const marketRow = marketData[mRow];
              let orders = [];
              try {
                orders = JSON.parse(marketRow[0] || "[]");
              } catch (e) {
                continue;
              }

              for (let oIdx = 0; oIdx < orders.length; oIdx++) {
                const order = orders[oIdx];
                if (order.order_id !== orderId) continue;

                orderFound = true;
                // –®–∞–≥ 3: –ü–µ—Ä–µ–Ω–æ—Å –¥–æ—Ö–æ–¥–æ–≤
                if (order.income > 0) {
                  building.incomes = (building.incomes || 0) + order.income;
                  order.income = 0;
                }

                // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                if (order.availableQuantity <= 0) {
                  orders.splice(oIdx, 1);
                  ordersToRemove.push(orderId);
                  newMessages.push(`[üóëÔ∏è –£–¥–∞–ª–µ–Ω] –û—Ä–¥–µ—Ä ${orderId}: —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.`);
                } else {
                  // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–æ–≤
                  if (order.turns_left === 0) {
                    // –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ –∑–¥–∞–Ω–∏—è
                    if (!building.warehouse[order.name]) {
                      building.warehouse[order.name] = { current_quantity: 0 };
                    }
                    building.warehouse[order.name].current_quantity += order.availableQuantity;
                    orders.splice(oIdx, 1);
                    ordersToRemove.push(orderId);
                    newMessages.push(`[üîÑ –í–æ–∑–≤—Ä–∞—Ç] –û—Ä–¥–µ—Ä ${orderId}: —Ç–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥.`);
                  } else {
                    order.turns_left--;
                    orders[oIdx] = order;
                    newMessages.push(`[‚è≥ –•–æ–¥] –û—Ä–¥–µ—Ä ${orderId}: –æ—Å—Ç–∞–ª–æ—Å—å ${order.turns_left} —Ö–æ–¥–æ–≤.`);
                  }
                }

                marketRow[0] = JSON.stringify(orders);
                break;
              }
              if (orderFound) break;
            }

            if (!orderFound) {
              ordersToRemove.push(orderId);
              newMessages.push(`[‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω] –û—Ä–¥–µ—Ä ${orderId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
            }
          });

          // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
          building.trade_orders = building.trade_orders.filter(id => !ordersToRemove.includes(id));
          updated = true;
        });

        if (updated) {
          buildingRow[0] = JSON.stringify(buildings);
        }
      } catch (err) {
        Logger.log(`[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π: ${err.message}`);
      }
    });

  } catch (error) {
    Logger.log(`[ERROR] ${error.message}`);
  }

  return newMessages;
}