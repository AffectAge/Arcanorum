function processSalesForBuildings(data) {
  const newMessages = [];
  Logger.log("[INFO] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã processSalesForBuildings");

  try {
    // -------------------------------------------------
    // 0. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    // -------------------------------------------------
    let stateName;
    try {
      const targetIdentifier = '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞';
      const targetRow = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ']?.find(row => row[0] === targetIdentifier);

      if (targetRow && targetRow[1]) {
        const jsonMatch = targetRow[1].match(/\{.*\}/);
        if (jsonMatch) {
          const variablesJson = JSON.parse(jsonMatch[0]);
          stateName = variablesJson.state_name;
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —è—á–µ–π–∫–∏ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
        }
      } else {
        throw new Error(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${targetIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }
    } catch (e) {
      Logger.log(`[ERROR] ${e.message}`);
      return newMessages;
    }
    Logger.log(`[INFO] –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ: ${stateName}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const provincesData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] || [];
    const goodsData = data['–¢–æ–≤–∞—Ä—ã'] || [];
    const marketData = data['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π_–†—ã–Ω–æ–∫'] || [];
    const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] || [];

    Logger.log(`[INFO] –ü—Ä–æ–≤–∏–Ω—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${provincesData.length}`);
    Logger.log(`[INFO] –¢–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${goodsData.length}`);
    Logger.log(`[INFO] –°—Ç—Ä–æ–∫ –Ω–∞ —Ä—ã–Ω–∫–µ: ${marketData.length}`);
    Logger.log(`[INFO] –ó–¥–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${buildingsData.length}`);

    // -------------------------------------------------
    // 1. –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    // -------------------------------------------------
    const provinceMap = {};
    provincesData.forEach((row, rowIndex) => {
      const cell = row[0];
      if (!cell || cell.trim() === "") return;
      try {
        const provinceObj = JSON.parse(cell);
        provinceMap[provinceObj.id] = provinceObj;
      } catch (err) {
        Logger.log(`[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${err.message}`);
      }
    });

    // -------------------------------------------------
    // 2. –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
    // -------------------------------------------------
    const goodsMap = {};
    goodsData.forEach((row, rowIndex) => {
      const cell = row[0];
      if (!cell || cell.trim() === "") return;
      try {
        const parsedGood = JSON.parse(cell);
        goodsMap[parsedGood.good_name] = {
          good_type: parsedGood.good_type,
          current_price: parsedGood.current_price
        };
      } catch (err) {
        Logger.log(`[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${err.message}`);
      }
    });

    // -------------------------------------------------
    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–∞–Ω–∏—è
    // -------------------------------------------------
    let hasSales = false;

    buildingsData.forEach((row, rowIndex) => {
      const cell = row[0];
      if (!cell || cell.trim() === "") return;

      try {
        Logger.log(`[DEBUG] –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: ${cell}`);

        const buildingsArray = JSON.parse(cell);
        if (!Array.isArray(buildingsArray) || buildingsArray.length === 0) {
          Logger.log(`[ERROR] –î–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
          return;
        }

        buildingsArray.forEach((building, bIndex) => {
          Logger.log(`[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏–µ ${bIndex + 1}: ${JSON.stringify(building)}`);

          if (!building.building_name) {
            Logger.log(`[ERROR] –í –∑–¥–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ "building_name"`);
            return;
          }

          if (building.building_owner !== stateName || building.status !== "–ê–∫—Ç–∏–≤–Ω–∞—è") {
            Logger.log(`[INFO] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–¥–∞–Ω–∏–µ: ${building.building_name} (–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ${stateName} –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)`);
            return;
          }

          Logger.log(`[INFO] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–∞–Ω–∏–µ: ${building.building_name}, –ü—Ä–æ–≤–∏–Ω—Ü–∏—è: ${building.province_id}`);

          const province = provinceMap[building.province_id];
          if (!province) {
            Logger.log(`[WARNING] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è ${building.province_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
          }

          // üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ
          for (const goodName in building.warehouse) {
            const goodData = building.warehouse[goodName];

            Logger.log(`[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä: ${goodName}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${goodData.current_quantity}, –†–µ–∑–µ—Ä–≤: ${goodData.reserve_level}`);

            if (goodData.current_quantity <= goodData.reserve_level) {
              Logger.log(`[INFO] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${goodName}". –ï—Å—Ç—å ${goodData.current_quantity}, —Ä–µ–∑–µ—Ä–≤ ${goodData.reserve_level}`);
              continue;
            }

            if (!goodsMap[goodName]) {
              Logger.log(`[ERROR] –¢–æ–≤–∞—Ä "${goodName}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ "–¢–æ–≤–∞—Ä—ã"`);
              continue;
            }

            const goodsInfo = goodsMap[goodName];
            const sellQuantity = goodData.current_quantity - goodData.reserve_level;
            const transportType = goodsInfo.good_type;
            const price = goodsInfo.current_price;

            Logger.log(`[DEBUG] –¢–æ–≤–∞—Ä "${goodName}" –Ω–∞–π–¥–µ–Ω. –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: ${transportType}, –¶–µ–Ω–∞: ${price}`);

            // üöõ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            if ((province.total_transport.available[transportType] || 0) < sellQuantity) {
              Logger.log(`[WARNING] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${transportType}" –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${province.id}". –ù—É–∂–Ω–æ ${sellQuantity}, –¥–æ—Å—Ç—É–ø–Ω–æ ${province.total_transport.available[transportType]}`);
              continue;
            }

            // üèõ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫
            let placed = false;
            for (let i = 0; i < marketData.length; i++) {
              let orders = JSON.parse(marketData[i][0] || "[]");

              Logger.log(`[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫ (—Å—Ç—Ä–æ–∫–∞ ${i}): –∑–∞–Ω—è—Ç–æ ${orders.length} / 40`);

              if (orders.length < 40) {
                orders.push({
                  name: goodName,
                  price: price,
                  order_id: Math.floor(10000000 + Math.random() * 90000000),
                  transport_type: transportType,
                  country: stateName
                });

                marketData[i][0] = JSON.stringify(orders);
                placed = true;
                Logger.log(`[SUCCESS] –ü—Ä–æ–¥–∞–Ω —Ç–æ–≤–∞—Ä: ${goodName}, –ö–æ–ª-–≤–æ: ${sellQuantity}, –¶–µ–Ω–∞: ${price}`);
                break;
              }
            }

            if (!placed) {
              Logger.log(`[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è "${goodName}" ‚Äî —Ä—ã–Ω–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω`);
              continue;
            }

            // ‚úÖ –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            province.total_transport.available[transportType] -= sellQuantity;
            building.warehouse[goodName].current_quantity = goodData.reserve_level;

            Logger.log(`[INFO] –¢–æ–≤–∞—Ä "${goodName}" –ø—Ä–æ–¥–∞–Ω. –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${building.warehouse[goodName].current_quantity}, –û—Å—Ç–∞—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${transportType}": ${province.total_transport.available[transportType]}`);
          }
        });
      } catch (err) {
        Logger.log(`[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${err.message}`);
      }
    });

    if (!hasSales) {
      Logger.log(`[INFO] –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, –Ω–æ –ø—Ä–æ–¥–∞–∂ –Ω–µ –±—ã–ª–æ.`);
    }

  } catch (error) {
    Logger.log(`[ERROR] ${error.message}`);
  }

  return newMessages;
}
